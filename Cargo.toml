[workspace]
resolver = "2"
members = ["core", "fluxmq-client"]

[workspace.package]
version = "0.1.0"
edition = "2021"
authors = ["FluxMQ Team"]
license = "MIT"
repository = "https://github.com/gosuda/fluxmq"
homepage = "https://github.com/gosuda/fluxmq"
documentation = "https://docs.rs/fluxmq"
readme = "README.md"
keywords = ["kafka", "message-broker", "streaming", "distributed", "async"]
categories = ["network-programming", "asynchronous", "database-implementations"]
description = "High-performance message broker and streaming platform inspired by Apache Kafka"

# Shared dependencies across workspace members
[workspace.dependencies]
# Async runtime
tokio = { version = "1.47.1", features = ["full"] }
tokio-util = { version = "0.7.16", features = ["codec"] }
tokio-stream = "0.1.17"
futures = "0.3.31"

# Time util 
chrono = { version = "0.4.42", features = ["serde"] }

# Serialization
serde = { version = "1.0.221", features = ["derive"] }
serde_json = "1.0.144"
bytes = { version = "1.10.1", features = ["serde"] }

# Storage and I/O
memmap2 = "0.9.8"
crc32fast = "1.5.0"

# Concurrency
crossbeam = "0.8.4"
parking_lot = "0.12.4"

# Low-level networking
socket2 = "0.6.0"

# Error handling
thiserror = "2.0.16"
anyhow = "1.0.99"

# Logging and monitoring
tracing = "0.1.41"
tracing-subscriber = "0.3.20"
metrics = "0.24.2"

# Configuration
config = "0.15.15"
clap = { version = "4.5.47", features = ["derive"] }

# Client-specific dependencies
uuid = { version = "1.18.1", features = ["v4", "serde"] }
dashmap = "6.1.0"
once_cell = "1.21.3"

# Benchmarking and testing
criterion = { version = "0.7.0", features = ["html_reports"] }
tempfile = "3.22.0"
tokio-test = "0.4.4"

# Random number generation
rand = "0.9.2"

# High-performance memory allocator
mimalloc = { version = "0.1.48", default-features = false }

# TLS support
tokio-rustls = "0.26.2"
rustls = "0.23.31"
rustls-pemfile = "2.2.0"

# Configuration
toml = "0.9.5"


# Workspace-level profiles - Optimized for maximum performance
[profile.release]
lto = "fat"       # Enhanced LTO for better optimization
codegen-units = 1 # Single codegen unit for best optimization
panic = "abort"   # Smaller binary, better performance
strip = true      # Remove debug symbols
opt-level = 3     # Maximum optimization level
# Note: target-cpu = "native" should be set via RUSTFLAGS environment variable

[profile.dev]
debug = 1
overflow-checks = true

[profile.test]
debug = 1

# Benchmarking profile
[profile.bench]
debug = 1
lto = "thin"

# Workspace metadata
[workspace.metadata]
docs-rs-features = ["full"]

[workspace.metadata.release]
shared-version = true
tag-name = "v{{version}}"
pre-release-hook = ["cargo", "test", "--workspace"]

# Workspace aliases for common commands
[workspace.metadata.commands]
# Run all tests
test-all = "cargo test --workspace"
# Run benchmarks  
bench-all = "cargo bench --workspace"
# Check all packages
check-all = "cargo check --workspace"
# Build all packages in release mode
build-all = "cargo build --workspace --release"
# Run clippy on all packages
lint-all = "cargo clippy --workspace -- -D warnings"
# Format all code
fmt-all = "cargo fmt --all"

# Optional: Global patch section for dependency overrides if needed
# [patch.crates-io]
# Replace with local versions if developing dependencies locally
