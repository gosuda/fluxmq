#!/usr/bin/env python3

"""
Optimized Batch Producer Test for FluxMQ
Aggressive batching configuration to achieve true batch processing
"""

from kafka import KafkaProducer
import time
import json

def optimized_batch_test():
    """ÏµúÏ†ÅÌôîÎêú Î∞∞Ïπò Producer ÌÖåÏä§Ìä∏ - 49k+ msg/sec Î™©Ìëú"""
    print("üöÄ Optimized Batch Producer Test - Target: 49k+ msg/sec")
    print("=" * 60)
    
    try:
        # Producer ÏÉùÏÑ± - Í∑πÎèÑÎ°ú Í≥µÍ≤©Ï†ÅÏù∏ Î∞∞Ïπò ÏÑ§Ï†ï
        producer = KafkaProducer(
            bootstrap_servers=['localhost:9092'],
            value_serializer=lambda x: json.dumps(x).encode('utf-8'),
            client_id='optimized-batch-producer',
            
            # üöÄ Í∑πÎèÑÏùò Î∞∞Ïπò ÏµúÏ†ÅÌôî ÏÑ§Ï†ï
            batch_size=65536,         # 64KB Î∞∞Ïπò (Í∏∞Î≥∏Í∞íÏùò 4Î∞∞)
            linger_ms=100,           # 100ms ÎåÄÍ∏∞ (Í∏∞Î≥∏Í∞íÏùò 10Î∞∞) - Î∞∞Ïπò ÎàÑÏ†Å ÏãúÍ∞Ñ
            buffer_memory=134217728, # 128MB Î≤ÑÌçº (Í∏∞Î≥∏Í∞íÏùò 4Î∞∞)
            max_request_size=2097152,# 2MB ÏµúÎåÄ ÏöîÏ≤≠ (Í∏∞Î≥∏Í∞íÏùò 2Î∞∞)
            
            # üî• ÏÑ±Îä• Í∑πÎåÄÌôî ÏÑ§Ï†ï
            acks=1,                  # LeaderÎßå ÌôïÏù∏ (all=Î™®Îì† replica ÎåÄÍ∏∞ vs 1=leaderÎßå)
            retries=1,               # Ïû¨ÏãúÎèÑ ÏµúÏÜåÌôî
            max_in_flight_requests_per_connection=10,  # Î≥ëÎ†¨ ÏöîÏ≤≠ Ï¶ùÍ∞Ä
            
            # üìä ÏïïÏ∂ï Î∞è ÎÑ§Ìä∏ÏõåÌÅ¨ ÏµúÏ†ÅÌôî
            # compression_type=None,   # ÏïïÏ∂ï ÎπÑÌôúÏÑ±ÌôîÎ°ú CPU Ï†àÏïΩ
            
            # üéØ Î∞∞Ïπò Í∞ïÏ†ú ÏÑ§Ï†ï
            send_buffer_bytes=262144,    # 256KB ÏÜ°Ïã† Î≤ÑÌçº
            receive_buffer_bytes=262144, # 256KB ÏàòÏã† Î≤ÑÌçº
        )
        
        topic_name = 'ultra-batch-topic'
        num_messages = 20000  # Î©îÏãúÏßÄ Ïàò Ï¶ùÍ∞Ä
        
        print(f"Sending {num_messages:,} messages to topic: {topic_name}")
        print(f"Batch Configuration:")
        print(f"  - Batch size: 64KB")
        print(f"  - Linger time: 100ms (Î∞∞Ïπò ÎàÑÏ†Å ÎåÄÍ∏∞)")
        print(f"  - Buffer memory: 128MB")
        print(f"  - Max request: 2MB")
        print(f"  - In-flight requests: 10")
        
        start_time = time.time()
        
        # üöÄ ÎåÄÎüâ Î©îÏãúÏßÄ Ï†ÑÏÜ° - Î∞∞Ïπò ÎàÑÏ†ÅÏùÑ ÏúÑÌï¥ Îπ†Î•¥Í≤å Ï†ÑÏÜ°
        print("Phase 1: Rapid message queuing for batch accumulation...")
        for i in range(num_messages):
            message = {
                'id': i,
                'timestamp': time.time(),
                'batch_test': True,
                'data': f'ultra-batch-msg-{i:06d}',
                'payload': 'x' * 200  # 200Î∞îÏù¥Ìä∏ ÌéòÏù¥Î°úÎìú (ÌòÑÏã§Ï†ÅÏù∏ ÌÅ¨Í∏∞)
            }
            
            # ÎπÑÎèôÍ∏∞ Ï†ÑÏÜ° - linger_ms ÎèôÏïà Î∞∞ÏπòÏóê ÎàÑÏ†ÅÎê®
            future = producer.send(topic_name, message)
            
            if i % 2000 == 0 and i > 0:
                elapsed = time.time() - start_time
                rate = i / elapsed if elapsed > 0 else 0
                print(f"  Queued: {i:,} messages... ({rate:,.0f} msg/sec so far)")
        
        queued_time = time.time()
        print(f"Phase 2: Force flushing all batches...")
        
        # üî• Í∞ïÏ†úÎ°ú Î™®Îì† Î∞∞Ïπò Ï†ÑÏÜ° Î∞è ÏôÑÎ£å ÎåÄÍ∏∞
        producer.flush()
        
        flushed_time = time.time()
        producer.close()
        
        end_time = time.time()
        
        # üìä ÏÉÅÏÑ∏Ìïú ÏÑ±Îä• Î∂ÑÏÑù
        total_duration = end_time - start_time
        queue_duration = queued_time - start_time
        flush_duration = flushed_time - queued_time
        
        total_throughput = num_messages / total_duration
        queue_throughput = num_messages / queue_duration if queue_duration > 0 else float('inf')
        
        print(f"\nüéØ Optimized Batch Results:")
        print(f"   Messages: {num_messages:,}")
        print(f"   Total duration: {total_duration:.3f} seconds")
        print(f"   Queue phase: {queue_duration:.3f} seconds ({queue_throughput:,.0f} msg/sec)")
        print(f"   Flush phase: {flush_duration:.3f} seconds")
        print(f"   Overall throughput: {total_throughput:,.0f} msg/sec")
        
        # üéâ ÏÑ±Í≥º Î∂ÑÏÑù
        if total_throughput >= 49000:
            print(f"üéâ SUCCESS! Achieved Phase 1 target: {total_throughput:,.0f} msg/sec!")
            if total_throughput >= 100000:
                print(f"üöÄ ULTRA SUCCESS! Approaching Phase 2 levels!")
        elif total_throughput >= 30000:
            print(f"üî• EXCELLENT! {total_throughput:,.0f} msg/sec - Very close to target!")
        elif total_throughput >= 15000:
            print(f"‚úÖ GOOD PROGRESS! {total_throughput:,.0f} msg/sec - 2x improvement!")
        else:
            print(f"üìä BASELINE: {total_throughput:,.0f} msg/sec - Need more optimization")
        
        # Î∞∞Ïπò Ìö®Ïú®ÏÑ± Î∂ÑÏÑù
        estimated_batches = max(1, int(total_duration / 0.1))  # 100ms linger Í∏∞Ï§Ä
        avg_batch_size = num_messages / estimated_batches if estimated_batches > 0 else 0
        print(f"   Estimated batches: {estimated_batches}")
        print(f"   Avg messages per batch: {avg_batch_size:.1f}")
        
        return total_throughput
        
    except Exception as e:
        print(f"‚ö†Ô∏è Error: {e}")
        return 0

if __name__ == "__main__":
    optimized_batch_test()